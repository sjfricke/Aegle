{"version":3,"sources":["meteor://ðŸ’»app/packages/minimongo/minimongo_client.js","meteor://ðŸ’»app/packages/minimongo/common.js","meteor://ðŸ’»app/packages/minimongo/cursor.js","meteor://ðŸ’»app/packages/minimongo/local_collection.js","meteor://ðŸ’»app/packages/minimongo/matcher.js","meteor://ðŸ’»app/packages/minimongo/minimongo_common.js","meteor://ðŸ’»app/packages/minimongo/observe_handle.js","meteor://ðŸ’»app/packages/minimongo/sorter.js"],"names":["module","watch","require","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","v","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","call","LOGICAL_OPERATORS","key","reduce","a","b","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","fn","doc","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","curDistance","_isUpdate","branch","arrayIndices","andSomeMatchers","subMatchers","match","subResult","docOrBranches","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","expanded","branches","matched","element","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","concat","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","thisIsOperator","selKey","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","omitUnnecessaryFields","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","pathArray","path","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","rule","keyPath","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","Cursor","collection","sorter","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","Sorter","skip","limit","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","_depend","added","removed","_getRawObjects","ordered","fetch","callback","thisArg","addedBefore","changed","movedBefore","getTransform","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","_map","clone","handle","ObserveHandle","stop","active","onInvalidate","drain","rewind","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","Meteor","_SynchronousQueue","create","_savedOriginals","find","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","mod","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","idParse","IdMap","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","details","ruleTree","subdoc","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","next","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$min","$max","$inc","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$rename","target2","$bit","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","isUpdate","_paths","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_getPaths","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_keyFilter","_useWithMatcher","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","_keyCompatibleWithSelector","part","invert","compare","constraintsByPath","constraints","ignoreCase","multiline","specPart","index","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand !== 'number') {\n        throw Error('$type needs a number');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(key) === 0) ||\n      (key.length > existingKey.length && key.indexOf(existingKey) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'))\n  );\n\n  const omitUnnecessaryFields = result => {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices = []) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({arrayIndices, value: undefined})];\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","import LocalCollection from './local_collection.js';\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = selector._id || selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(\n          options.sort || [],\n          {matcher: this.matcher}\n        );\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count() {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({ordered: true}).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        'must use ordered observe (ie, \\'addedBefore\\' instead of \\'added\\') ' +\n        'with skip or limit'\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n  rewind() {}\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query.  if sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get\n      // nothing. This is so it matches the behavior of the '{_id: foo}'\n      // path.\n      if (this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    if (!this.limit && !this.skip) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          const doc = EJSON.clone(fields);\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, fields, before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          const doc = EJSON.clone(fields);\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (!hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return result;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  const handle = cursor.observeChanges(changeObserver.applyChange);\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id and {_id}\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      const _id = selector._id || selector;\n\n      this._selector = {_id};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, _id)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec, options = {}) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n\n    // If you specify a matcher for this Sorter, _keyFilter may be set to a\n    // function which selects whether or not a given \"sort key\" (tuple of values\n    // for the different sort spec fields) is compatible with the selector.\n    this._keyFilter = null;\n\n    if (options.matcher) {\n      this._useWithMatcher(options.matcher);\n    }\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length) {\n        branches = [{value: null}];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (!this._keyCompatibleWithSelector(key)) {\n        return;\n      }\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null) {\n      throw Error('sort selector found no keys in doc?');\n    }\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  _keyCompatibleWithSelector(key) {\n    return !this._keyFilter || this._keyFilter(key);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher(matcher) {\n    if (this._keyFilter) {\n      throw Error('called _useWithMatcher twice?');\n    }\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (!this._sortSpecParts.length) {\n      return;\n    }\n\n    const selector = matcher._selector;\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function) {\n      return;\n    }\n\n    const constraintsByPath = {};\n\n    this._sortSpecParts.forEach(spec => {\n      constraintsByPath[spec.path] = [];\n    });\n\n    Object.keys(selector).forEach(key => {\n      const subSelector = selector[key];\n\n      // XXX support $and and $or\n      const constraints = constraintsByPath[key];\n      if (!constraints) {\n        return;\n      }\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline) {\n          return;\n        }\n\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        Object.keys(subSelector).forEach(operator => {\n          const operand = subSelector[operator];\n\n          if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand)\n            );\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand,\n                subSelector\n              )\n            );\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (!constraintsByPath[this._sortSpecParts[0].path].length) {\n      return;\n    }\n\n    this._keyFilter = key =>\n      this._sortSpecParts.every((specPart, index) =>\n        constraintsByPath[specPart.path].every(fn => fn(key[index]))\n      )\n    ;\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}